package search;

public class BinarySearchMax {

    // Pre: args - массив целых чисел, значения в котором сначала строго возрастают, а потом строго убывают
    //      && элементы массива принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
    // Post: max - максимальный элемент в массиве args
    public static void main(String[] args) {
        // args - массив целых чисел, значения в котором сначала строго возрастают, а потом строго убывают
        // && элементы массива принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
        int[] array = new int[args.length];
        // args - массив целых чисел && array - массив целых чисел длиной args.length
        // && значения в args сначала строго возрастают, а потом строго убывают
        // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
        int j = 0;
        // args - массив целых чисел && array - массив целых чисел длиной args.length && j = 0
        // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
        // Inv: args - массив целых чисел && array - массив целых чисел длиной args.length &&
        //      && значения в массивах сначала строго возрастают, а потом строго убывают
        //      array.length = args.length && j = j' + 1 && j >= 0 &&
        //      j <= args.length && array[0..j - 1] - массив целых чисел
        // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
        while(j < args.length) {
            // args - массив целых чисел && array - массив целых чисел длиной args.length
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // array.length = args.length && j = j' + 1 && j >= 0 &&
            // j < args.length && array[0..j - 1] - массив целых чисел
            // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
            array[j] = Integer.parseInt(args[j]);
            // args - массив целых чисел && array - массив целых чисел длиной args.length
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // array.length = args.length && j = j' + 1 && j >= 0 &&
            // j < args.length && array[0..j] - массив целых чисел
            // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
            j++;
            // args - массив целых чисел && array - массив целых чисел длиной args.length
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // array.length = args.length && j = j' + 1 && j >= 0 &&
            // j <= args.length && array[0..j - 1] - массив целых чисел
            // && элементы массива args принадлежат диапозону [Integer.MIN_VALUE, Integer.MAX_VALUE]
        }
        // args - массив целых чисел && array - массив целых чисел длиной args.length
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        int max = binarySearchMaxIterative(array);
        // max - макисмальный элемент в массиве array
        System.out.println(max);
        // max - макисмальный элемент в массиве array
    }

    // Pre: && array - массив целых чисел
    //      && значения в массивах сначала строго возрастают, а потом строго убывают
    // Post: R - максимальный элемент в массиве array
    private static int binarySearchMaxIterative(int[] array) {
        // array - массив целых чисел
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        if (array.length < 2 || array[0] > array[1]) {
            // array - массив целых чисел && array.length < 2 || array[0] > array[1]
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && array[0] - максимальный элемент в массиве array
            return array[0];
        }
        // array - массив целых чисел && array[0] - не максимальный элемент в массиве array
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        int l = 0, r = array.length - 1;
        // array - массив целых чисел
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        // && l = 0 && r = array.length - 1
        // Inv: индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
        while (r - l > 1) {
            // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 1
            int m = (l + r) / 2;
            // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 1
            // && m = (l + r) / 2
            if (array[m] > array[m + 1]) {
                // индекс максимального элемента лежит в диапозоне (l, m] && r - l < r' - l' && r - l > 1
                // && m = (l + r) / 2
                r = m;
                // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
            } else {
                // индекс максимального элемента лежит в диапозоне (m, r] && r - l < r' - l' && r - l > 1
                // && m = (l + r) / 2
                l = m;
                // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
            }
            // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
        }
        // индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l < 2
        // && array[R] - максимальный элемент в массиве array && R = array[r]
        return array[r];
    }

    // Pre: && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
    //      && значения в массивах сначала строго возрастают, а потом строго убывают
    //      && индекс максимального элемента лежит в диапозоне [l, r] && r - l < r' - l' && r - l > 0
    // Post: R - максимальный элемент в массиве array
    private static int binarySearchMaxRecursive(int l, int r, int[] array) {
        // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        // && индекс максимального элемента лежит в диапозоне [l, r] && r - l < r' - l' && r - l > 0
        if (array.length < 2 || l + 1 == array.length || array[l] > array[l + 1]) {
            // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && array[l] - максимальный элемент в массиве array && R = array[l]
            return array[l];
        }
        // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
        // && значения в массивах сначала строго возрастают, а потом строго убывают
        // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
        if (r - l > 1) {
            // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 1
            int m = (l + r) / 2;
            // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 1
            // && m = (l + r) / 2
            if (array[m] > array[m + 1]) {
                // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
                // && значения в массивах сначала строго возрастают, а потом строго убывают
                // && индекс максимального элемента лежит в диапозоне (l, m] && r - l < r' - l' && r - l > 1
                // && m = (l + r) / 2
                r = m;
                // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
                // && значения в массивах сначала строго возрастают, а потом строго убывают
                // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
            } else {
                // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
                // && значения в массивах сначала строго возрастают, а потом строго убывают
                // && индекс максимального элемента лежит в диапозоне (m, r] && r - l < r' - l' && r - l > 1
                // && m = (l + r) / 2
                l = m;
                // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
                // && значения в массивах сначала строго возрастают, а потом строго убывают
                // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
            }
            // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l > 0
            return binarySearchMaxRecursive(l, r, array);
        }
            // && array - массив целых чисел && l >= 0 && r < array.length && l, r - целые числа
            // && значения в массивах сначала строго возрастают, а потом строго убывают
            // && индекс максимального элемента лежит в диапозоне (l, r] && r - l < r' - l' && r - l < 2
            // && array[r] - макисмальный элемент массива array && R = array[r]
            return array[r];
    }
}
